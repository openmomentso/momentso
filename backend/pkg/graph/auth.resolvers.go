package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.38

import (
	"context"
	"errors"
	"fmt"

	gonanoid "github.com/matoous/go-nanoid/v2"
	"github.com/rs/zerolog/log"
	"golang.org/x/crypto/bcrypt"

	"github.com/openmomentso/momentso/pkg/app/auth"
	"github.com/openmomentso/momentso/pkg/database/db"
	"github.com/openmomentso/momentso/pkg/graph/model"
)

// SignIn is the resolver for the signIn field.
func (r *mutationResolver) SignIn(ctx context.Context, email string, password string) (*model.SignInPayload, error) {
	user, err := r.DB.UserFindByEmail(ctx, email)
	if err != nil {
		return nil, err
	}

	err = bcrypt.CompareHashAndPassword([]byte(user.Password), []byte(password))
	if err != nil {
		return nil, err
	}

	token := gonanoid.Must(64)
	_, err = r.DB.SessionCreate(ctx, db.SessionCreateParams{
		UserID: user.ID,
		Token:  token,
	})
	if err != nil {
		return nil, err
	}

	return &model.SignInPayload{
		User:  user,
		Token: token,
	}, nil
}

// SignUp is the resolver for the signUp field.
func (r *mutationResolver) SignUp(ctx context.Context, email string, password string, name string) (*model.SignUpPayload, error) {
	hash, err := bcrypt.GenerateFromPassword([]byte(password), bcrypt.DefaultCost)
	if err != nil {
		return nil, err
	}

	user, err := r.DB.UserCreate(ctx, db.UserCreateParams{
		Email:    email,
		Password: string(hash),
		Name:     name,
	})
	if err != nil {
		return nil, err
	}

	token := gonanoid.Must(64)
	_, err = r.DB.SessionCreate(ctx, db.SessionCreateParams{
		UserID: user.ID,
		Token:  token,
	})
	if err != nil {
		return nil, err
	}

	return &model.SignUpPayload{
		User:  user,
		Token: token,
	}, nil
}

// RequestPasswordReset is the resolver for the requestPasswordReset field.
func (r *mutationResolver) RequestPasswordReset(ctx context.Context, email string) (*model.RequestPasswordResetPayload, error) {
	user, err := r.DB.UserFindByEmail(ctx, email)
	if err != nil {
		return &model.RequestPasswordResetPayload{}, nil
	}

	token := gonanoid.Must(64)
	err = r.DB.PasswordResetSet(ctx, db.PasswordResetSetParams{
		UserID: user.ID,
		Token:  token,
	})
	if err != nil {
		log.Err(err).Msg("failed to set password reset token")
		return &model.RequestPasswordResetPayload{}, nil
	}

	err = r.Mail.SendPasswordReset(user.Name, user.Email, token)
	if err != nil {
		log.Err(err).Msg("failed to send password reset email")
		return &model.RequestPasswordResetPayload{}, nil
	}

	return &model.RequestPasswordResetPayload{}, nil
}

// ResetPassword is the resolver for the resetPassword field.
func (r *mutationResolver) ResetPassword(ctx context.Context, token string, newPassword string) (*model.ResetPasswordPayload, error) {
	user, err := r.DB.UserFindByPasswordResetToken(ctx, token)
	if err != nil {
		return nil, err
	}

	hash, err := bcrypt.GenerateFromPassword([]byte(newPassword), bcrypt.DefaultCost)
	if err != nil {
		return nil, err
	}

	err = r.DB.UserUpdatePassword(ctx, db.UserUpdatePasswordParams{
		ID:       user.ID,
		Password: string(hash),
	})
	if err != nil {
		return nil, err
	}

	err = r.DB.PasswordResetDelete(ctx, user.ID)
	if err != nil {
		return nil, err
	}

	return &model.ResetPasswordPayload{}, nil
}

// UpdateMorningRecapOptIn is the resolver for the updateMorningRecapOptIn field.
func (r *mutationResolver) UpdateMorningRecapOptIn(ctx context.Context, enabled bool) (*model.UpdateMorningRecapOptInPayload, error) {
	user, ok := auth.UserForCtx(ctx)
	if !ok {
		return nil, errors.New("unauthorized")
	}

	user, err := r.DB.UserUpdateMorningRecapOptIn(ctx, db.UserUpdateMorningRecapOptInParams{
		ID:                user.ID,
		MorningRecapOptIn: enabled,
	})
	if err != nil {
		return nil, err
	}

	return &model.UpdateMorningRecapOptInPayload{
		User: user,
	}, nil
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*db.User, error) {
	user, ok := auth.UserForCtx(ctx)
	if !ok {
		return nil, errors.New("unauthorized")
	}
	return &user, nil
}

// reserved is the resolver for the _ field.
func (r *requestPasswordResetPayloadResolver) reserved(ctx context.Context, obj *model.RequestPasswordResetPayload) (interface{}, error) {
	panic(fmt.Errorf("not implemented: reserved - _"))
}

// reserved is the resolver for the _ field.
func (r *resetPasswordPayloadResolver) reserved(ctx context.Context, obj *model.ResetPasswordPayload) (interface{}, error) {
	panic(fmt.Errorf("not implemented: reserved - _"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// RequestPasswordResetPayload returns RequestPasswordResetPayloadResolver implementation.
func (r *Resolver) RequestPasswordResetPayload() RequestPasswordResetPayloadResolver {
	return &requestPasswordResetPayloadResolver{r}
}

// ResetPasswordPayload returns ResetPasswordPayloadResolver implementation.
func (r *Resolver) ResetPasswordPayload() ResetPasswordPayloadResolver {
	return &resetPasswordPayloadResolver{r}
}

type mutationResolver struct{ *Resolver }
type requestPasswordResetPayloadResolver struct{ *Resolver }
type resetPasswordPayloadResolver struct{ *Resolver }
