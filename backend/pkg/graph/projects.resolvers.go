package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.38

import (
	"context"
	"errors"
	"fmt"

	sq "github.com/Masterminds/squirrel"

	"github.com/openmomentso/momentso/pkg/app/auth"
	"github.com/openmomentso/momentso/pkg/database"
	"github.com/openmomentso/momentso/pkg/database/db"
	"github.com/openmomentso/momentso/pkg/graph/model"
)

// CreateProject is the resolver for the createProject field.
func (r *mutationResolver) CreateProject(ctx context.Context, input model.CreateProjectInput) (*model.CreateProjectPayload, error) {
	user, ok := auth.UserForCtx(ctx)
	if !ok {
		return nil, errors.New("unauthorized")
	}

	project, err := r.DB.ProjectCreate(ctx, db.ProjectCreateParams{
		Name:   input.Name,
		Color:  input.Color,
		UserID: user.ID,
	})

	return &model.CreateProjectPayload{
		Project: project,
	}, err
}

// UpdateProject is the resolver for the updateProject field.
func (r *mutationResolver) UpdateProject(ctx context.Context, id int64, input map[string]interface{}) (*model.UpdateProjectPayload, error) {
	user, ok := auth.UserForCtx(ctx)
	if !ok {
		return nil, errors.New("unauthorized")
	}

	if len(input) == 0 {
		return nil, errors.New("no input")
	}

	update := r.DB.NewQueryBuilder().Update("projects").Where(sq.Eq{"id": id, "user_id": user.ID}).Suffix("returning *")
	for key, value := range input {
		switch key {
		case "name", "color":
			update = update.Set(key, value)
		}
	}

	project, err := database.ScanUpdateOne[db.Project](r.DB, ctx, update)
	return &model.UpdateProjectPayload{
		Project: project,
	}, err
}

// Projects is the resolver for the projects field.
func (r *queryResolver) Projects(ctx context.Context) (*model.ProjectConnection, error) {
	user, ok := auth.UserForCtx(ctx)
	if !ok {
		return nil, fmt.Errorf("unauthorized")
	}

	projects, err := r.DB.ProjectFind(ctx, user.ID)
	return &model.ProjectConnection{
		Edges: projects,
	}, err
}
