// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: timeEntry.sql

package db

import (
	"context"
	"time"
)

const timeEntryCreate = `-- name: TimeEntryCreate :one
insert into time_entries (created_by, started_at, description) values ($1, $2, $3) returning id, description, workspace_id, created_by, created_at, started_at, completed_at
`

type TimeEntryCreateParams struct {
	CreatedBy   int64     `db:"created_by"`
	StartedAt   time.Time `db:"started_at"`
	Description string    `db:"description"`
}

func (q *Queries) TimeEntryCreate(ctx context.Context, arg TimeEntryCreateParams) (TimeEntry, error) {
	row := q.db.QueryRow(ctx, timeEntryCreate, arg.CreatedBy, arg.StartedAt, arg.Description)
	var i TimeEntry
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.WorkspaceID,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.StartedAt,
		&i.CompletedAt,
	)
	return i, err
}

const timeEntryFind = `-- name: TimeEntryFind :many
select id, description, workspace_id, created_by, created_at, started_at, completed_at from time_entries where created_by = $1
`

func (q *Queries) TimeEntryFind(ctx context.Context, createdBy int64) ([]TimeEntry, error) {
	rows, err := q.db.Query(ctx, timeEntryFind, createdBy)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TimeEntry
	for rows.Next() {
		var i TimeEntry
		if err := rows.Scan(
			&i.ID,
			&i.Description,
			&i.WorkspaceID,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.StartedAt,
			&i.CompletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const timeEntryFindById = `-- name: TimeEntryFindById :one
select id, description, workspace_id, created_by, created_at, started_at, completed_at from time_entries where id = $1 and created_by = $2
`

type TimeEntryFindByIdParams struct {
	ID        int64 `db:"id"`
	CreatedBy int64 `db:"created_by"`
}

func (q *Queries) TimeEntryFindById(ctx context.Context, arg TimeEntryFindByIdParams) (TimeEntry, error) {
	row := q.db.QueryRow(ctx, timeEntryFindById, arg.ID, arg.CreatedBy)
	var i TimeEntry
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.WorkspaceID,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.StartedAt,
		&i.CompletedAt,
	)
	return i, err
}
