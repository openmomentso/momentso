// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: projects.sql

package db

import (
	"context"
)

const projectCreate = `-- name: ProjectCreate :one
insert into projects (name, user_id, color) values ($1, $2, $3) returning id, user_id, created_at, name, color, client_id
`

type ProjectCreateParams struct {
	Name   string `db:"name"`
	UserID int64  `db:"user_id"`
	Color  string `db:"color"`
}

func (q *Queries) ProjectCreate(ctx context.Context, arg ProjectCreateParams) (Project, error) {
	row := q.db.QueryRow(ctx, projectCreate, arg.Name, arg.UserID, arg.Color)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.Name,
		&i.Color,
		&i.ClientID,
	)
	return i, err
}

const projectFind = `-- name: ProjectFind :many
select id, user_id, created_at, name, color, client_id from projects where user_id = $1
`

func (q *Queries) ProjectFind(ctx context.Context, userID int64) ([]Project, error) {
	rows, err := q.db.Query(ctx, projectFind, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Project
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CreatedAt,
			&i.Name,
			&i.Color,
			&i.ClientID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
