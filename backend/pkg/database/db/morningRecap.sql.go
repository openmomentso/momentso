// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: morningRecap.sql

package db

import (
	"context"
)

const morningRecapFindUsers = `-- name: MorningRecapFindUsers :many
select u.id, u.name, u.email from users u
inner join public.time_entries te on u.id = te.created_by and te.started_at > (now() - interval '1 day')
where u.morning_recap_opt_in is true and (u.morning_recap_last_sent_at < (now() - interval '1 day') or u.morning_recap_last_sent_at is null)
group by (u.id, u.name, u.email)
having count(te) > 0
limit 100
`

type MorningRecapFindUsersRow struct {
	ID    int64  `db:"id"`
	Name  string `db:"name"`
	Email string `db:"email"`
}

func (q *Queries) MorningRecapFindUsers(ctx context.Context) ([]MorningRecapFindUsersRow, error) {
	rows, err := q.db.Query(ctx, morningRecapFindUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MorningRecapFindUsersRow
	for rows.Next() {
		var i MorningRecapFindUsersRow
		if err := rows.Scan(&i.ID, &i.Name, &i.Email); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const morningRecapSent = `-- name: MorningRecapSent :exec
update users set morning_recap_last_sent_at = now() where id = $1
`

func (q *Queries) MorningRecapSent(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, morningRecapSent, id)
	return err
}

const morningRecapTimeEntriesForUser = `-- name: MorningRecapTimeEntriesForUser :many
select id, description, created_by, created_at, started_at, completed_at, project_id from time_entries
where created_by = $1 and
      started_at > (now() - interval '1 day') and
      completed_at is not null
order by completed_at-started_at desc
limit 8
`

func (q *Queries) MorningRecapTimeEntriesForUser(ctx context.Context, createdBy int64) ([]TimeEntry, error) {
	rows, err := q.db.Query(ctx, morningRecapTimeEntriesForUser, createdBy)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TimeEntry
	for rows.Next() {
		var i TimeEntry
		if err := rows.Scan(
			&i.ID,
			&i.Description,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.StartedAt,
			&i.CompletedAt,
			&i.ProjectID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const userUpdateMorningRecapOptIn = `-- name: UserUpdateMorningRecapOptIn :one
update users set morning_recap_opt_in = $1 where id = $2 returning id, name, email, password, created_at, morning_recap_opt_in, morning_recap_last_sent_at
`

type UserUpdateMorningRecapOptInParams struct {
	MorningRecapOptIn bool  `db:"morning_recap_opt_in"`
	ID                int64 `db:"id"`
}

func (q *Queries) UserUpdateMorningRecapOptIn(ctx context.Context, arg UserUpdateMorningRecapOptInParams) (User, error) {
	row := q.db.QueryRow(ctx, userUpdateMorningRecapOptIn, arg.MorningRecapOptIn, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.MorningRecapOptIn,
		&i.MorningRecapLastSentAt,
	)
	return i, err
}
